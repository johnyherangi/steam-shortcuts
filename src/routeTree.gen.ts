/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SteamdirUserdataImport } from './routes/_steamdir.userdata'
import { Route as SteamdirUserdataUserIdImport } from './routes/_steamdir.userdata.$userId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SteamdirUserdataRoute = SteamdirUserdataImport.update({
  id: '/_steamdir/userdata',
  path: '/userdata',
  getParentRoute: () => rootRoute,
} as any)

const SteamdirUserdataUserIdRoute = SteamdirUserdataUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => SteamdirUserdataRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_steamdir/userdata': {
      id: '/_steamdir/userdata'
      path: '/userdata'
      fullPath: '/userdata'
      preLoaderRoute: typeof SteamdirUserdataImport
      parentRoute: typeof rootRoute
    }
    '/_steamdir/userdata/$userId': {
      id: '/_steamdir/userdata/$userId'
      path: '/$userId'
      fullPath: '/userdata/$userId'
      preLoaderRoute: typeof SteamdirUserdataUserIdImport
      parentRoute: typeof SteamdirUserdataImport
    }
  }
}

// Create and export the route tree

interface SteamdirUserdataRouteChildren {
  SteamdirUserdataUserIdRoute: typeof SteamdirUserdataUserIdRoute
}

const SteamdirUserdataRouteChildren: SteamdirUserdataRouteChildren = {
  SteamdirUserdataUserIdRoute: SteamdirUserdataUserIdRoute,
}

const SteamdirUserdataRouteWithChildren =
  SteamdirUserdataRoute._addFileChildren(SteamdirUserdataRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/userdata': typeof SteamdirUserdataRouteWithChildren
  '/userdata/$userId': typeof SteamdirUserdataUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/userdata': typeof SteamdirUserdataRouteWithChildren
  '/userdata/$userId': typeof SteamdirUserdataUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_steamdir/userdata': typeof SteamdirUserdataRouteWithChildren
  '/_steamdir/userdata/$userId': typeof SteamdirUserdataUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/userdata' | '/userdata/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/userdata' | '/userdata/$userId'
  id: '__root__' | '/' | '/_steamdir/userdata' | '/_steamdir/userdata/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SteamdirUserdataRoute: typeof SteamdirUserdataRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SteamdirUserdataRoute: SteamdirUserdataRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_steamdir/userdata"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_steamdir/userdata": {
      "filePath": "_steamdir.userdata.tsx",
      "children": [
        "/_steamdir/userdata/$userId"
      ]
    },
    "/_steamdir/userdata/$userId": {
      "filePath": "_steamdir.userdata.$userId.tsx",
      "parent": "/_steamdir/userdata"
    }
  }
}
ROUTE_MANIFEST_END */
