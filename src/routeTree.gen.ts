/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as IndexImport } from "./routes/index"
import { Route as SteamImport } from "./routes/steam"
import { Route as SteamUserdataImport } from "./routes/steam.userdata"
import { Route as SteamUserdataUserIdImport } from "./routes/steam.userdata.$userId"

// Create/Update Routes

const SteamRoute = SteamImport.update({
  id: "/steam",
  path: "/steam",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const SteamUserdataRoute = SteamUserdataImport.update({
  id: "/userdata",
  path: "/userdata",
  getParentRoute: () => SteamRoute,
} as any)

const SteamUserdataUserIdRoute = SteamUserdataUserIdImport.update({
  id: "/$userId",
  path: "/$userId",
  getParentRoute: () => SteamUserdataRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/steam": {
      id: "/steam"
      path: "/steam"
      fullPath: "/steam"
      preLoaderRoute: typeof SteamImport
      parentRoute: typeof rootRoute
    }
    "/steam/userdata": {
      id: "/steam/userdata"
      path: "/userdata"
      fullPath: "/steam/userdata"
      preLoaderRoute: typeof SteamUserdataImport
      parentRoute: typeof SteamImport
    }
    "/steam/userdata/$userId": {
      id: "/steam/userdata/$userId"
      path: "/$userId"
      fullPath: "/steam/userdata/$userId"
      preLoaderRoute: typeof SteamUserdataUserIdImport
      parentRoute: typeof SteamUserdataImport
    }
  }
}

// Create and export the route tree

interface SteamUserdataRouteChildren {
  SteamUserdataUserIdRoute: typeof SteamUserdataUserIdRoute
}

const SteamUserdataRouteChildren: SteamUserdataRouteChildren = {
  SteamUserdataUserIdRoute: SteamUserdataUserIdRoute,
}

const SteamUserdataRouteWithChildren = SteamUserdataRoute._addFileChildren(
  SteamUserdataRouteChildren,
)

interface SteamRouteChildren {
  SteamUserdataRoute: typeof SteamUserdataRouteWithChildren
}

const SteamRouteChildren: SteamRouteChildren = {
  SteamUserdataRoute: SteamUserdataRouteWithChildren,
}

const SteamRouteWithChildren = SteamRoute._addFileChildren(SteamRouteChildren)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/steam": typeof SteamRouteWithChildren
  "/steam/userdata": typeof SteamUserdataRouteWithChildren
  "/steam/userdata/$userId": typeof SteamUserdataUserIdRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/steam": typeof SteamRouteWithChildren
  "/steam/userdata": typeof SteamUserdataRouteWithChildren
  "/steam/userdata/$userId": typeof SteamUserdataUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/steam": typeof SteamRouteWithChildren
  "/steam/userdata": typeof SteamUserdataRouteWithChildren
  "/steam/userdata/$userId": typeof SteamUserdataUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/steam" | "/steam/userdata" | "/steam/userdata/$userId"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/steam" | "/steam/userdata" | "/steam/userdata/$userId"
  id: "__root__" | "/" | "/steam" | "/steam/userdata" | "/steam/userdata/$userId"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SteamRoute: typeof SteamRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SteamRoute: SteamRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/steam"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/steam": {
      "filePath": "steam.tsx",
      "children": [
        "/steam/userdata"
      ]
    },
    "/steam/userdata": {
      "filePath": "steam.userdata.tsx",
      "parent": "/steam",
      "children": [
        "/steam/userdata/$userId"
      ]
    },
    "/steam/userdata/$userId": {
      "filePath": "steam.userdata.$userId.tsx",
      "parent": "/steam/userdata"
    }
  }
}
ROUTE_MANIFEST_END */
